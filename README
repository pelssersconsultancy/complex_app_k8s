docker-compose -f docker-compose-dev.yml up
docker-compose -f docker-compose-dev.yml up --build
docker-compose -f docker-compose-dev.yml down

$ docker build -t robbypelssers/multi-react:v2 ./react
$ docker push robbypelssers/multi-react:v2

$ kubectl set image <object_type>/<object_name> <container_name>=<new_image_to_use>

$ kubectl set image deployment/client-deployment client=robbypelssers/multi-react:v5

$ kubectl rollout restart -f client-deployment.yaml

# apply all kubernetes config files in the 'k8s' folder

$ kubectl apply -f k8s

# Get logs from a pod

$ kubectl logs <pod_name>

kubectl get deployments
kubectl get pods
kubectl get services
kubectl get pv
kubectl get pvc
kubectl get secrets

# Create a secret

$ kubectl create secret generic <secret_name> --from-literal key=value
E.G.
kubectl create secret generic pgpassword --from-literal PG_PASSWORD=my_password

We will be using
https://github.com/kubernetes/ingress-nginx

and NOT
https://github.com/nginxinc/kubernetes-ingress

Nice to read
https://www.joyfulbikeshedding.com/blog/2018-03-26-studying-the-kubernetes-ingress-system.html

https://www.blueshoe.io/blog/docker-desktop-and-kubernetes/

this setup will run the app and nginx is available on http://localhost:80 or https://localhost:443

# Useful links

https://dev.to/docker/9-docker-extensions-every-developer-must-try-1no2

https://www.localstack.cloud/

# Kubernetes dashboard

https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/#deploying-the-dashboard-ui

$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

Create user and cluster role
https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md

See dashboard-admin-user.yaml and dashboard-clusterrole.yaml

Next get the token for the admin-user
$ kubectl -n kubernetes-dashboard create token admin-user

$ kubectl proxy

Now dashboard is available at http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.
